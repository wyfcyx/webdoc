{"./":{"url":"./","title":"Introduction","keywords":"","body":"build web doc 用于构建含评论区（与 GitHub issue 关联）的 GitHun Page 的教程，详细内容请参考：https://xy-plus.github.io/webdoc/ const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitalk.render('gitalk-container') require(['gitbook'], function(gitbook) { const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitbook.events.bind('page.change', initMygitalk) function initMygitalk() { gitalk.render('gitalk-container') } }) "},"1. 编写文档.html":{"url":"1. 编写文档.html","title":"1. 编写文档","keywords":"","body":"编写文档 先上网搜一下怎么用 gitbook 写书，根据要求写好文档和 SUMMARY.md 。 const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitalk.render('gitalk-container') require(['gitbook'], function(gitbook) { const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitbook.events.bind('page.change', initMygitalk) function initMygitalk() { gitalk.render('gitalk-container') } }) "},"2. 本地浏览.html":{"url":"2. 本地浏览.html","title":"2. 本地浏览","keywords":"","body":"本地浏览 在包含 SUMMARY.md 的目录下执行：gitbook serve 。 没有这个命令的读者请自行安装 const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitalk.render('gitalk-container') require(['gitbook'], function(gitbook) { const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitbook.events.bind('page.change', initMygitalk) function initMygitalk() { gitalk.render('gitalk-container') } }) "},"3. 添加插件.html":{"url":"3. 添加插件.html","title":"3. 添加插件","keywords":"","body":"添加插件 在 SUMMARY.md 的同级目录下创建配置文件 book.json 。 const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitalk.render('gitalk-container') require(['gitbook'], function(gitbook) { const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitbook.events.bind('page.change', initMygitalk) function initMygitalk() { gitalk.render('gitalk-container') } }) "},"3.1. 参考配置.html":{"url":"3.1. 参考配置.html","title":"3.1. 参考配置","keywords":"","body":"参考配置 这里给出本网页使用的配置文件： { \"plugins\": [ \"chapter-fold\", \"code\", \"search-pro\", \"github\", \"localized-footer\", \"ancre-navigation\", \"-sharing\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/xy-plus/webdoc\" }, \"localized-footer\": { \"filename\": \"gitbook/comment.html\" } }, \"styles\": { \"website\": \"gitbook/website.css\" } } const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitalk.render('gitalk-container') require(['gitbook'], function(gitbook) { const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitbook.events.bind('page.change', initMygitalk) function initMygitalk() { gitalk.render('gitalk-container') } }) "},"3.2. 评论区.html":{"url":"3.2. 评论区.html","title":"3.2. 评论区","keywords":"","body":"评论区 实现方法 通过 localized-footer 为每一个页面的末尾增加一段 html 代码： { \"plugins\": [\"localized-footer\"], \"pluginsConfig\": { \"localized-footer\": { \"filename\": \"gitbook/comment.html\" } } } 参考代码 创建目录用于存放相关文件，我创建了目录 gitbook 用于存放相关文件，文件名为 comment.html 。 这些代码设置以下参数就可以直接使用了：clientID, clientSecret, repo, owner, admin 。 const gitalk = new Gitalk({ clientID: '\"GitHub Application Client ID\"', clientSecret: 'GitHub Application Client Secret', repo: 'GitHub repo', owner: 'GitHub repo owner', admin: [ 'GitHub repo owner and collaborators, only these guys can initialize github issues' ], createIssueManually: true, id: document.title }) 由于未知的原因（我太菜），下面那段代码需要两次 const gitalk = new Gitalk 填写两次参数，如果有更好的实现方式请提出，谢谢 clientID 和 clientSecret 需要通过在 GitHub 上注册获得：https://github.com/settings/applications/new 由于评论区与 GitHub issue 关联，所以需要为每个页面创建一个 issue ，createIssueManually: true 使得管理员能够一键创建 issue ，issue 的标题为 id ，这里使用 document.title 作为页面 id 。 const gitalk = new Gitalk({ clientID: '\"GitHub Application Client ID\"', clientSecret: 'GitHub Application Client Secret', repo: 'GitHub repo', owner: 'GitHub repo owner', admin: [ 'GitHub repo owner and collaborators, only these guys can initialize github issues' ], createIssueManually: true, id: document.title }) gitalk.render('gitalk-container') require(['gitbook'], function(gitbook) { const gitalk = new Gitalk({ clientID: '\"GitHub Application Client ID\"', clientSecret: 'GitHub Application Client Secret', repo: 'GitHub repo', owner: 'GitHub repo owner', admin: [ 'GitHub repo owner and collaborators, only these guys can initialize github issues' ], createIssueManually: true, id: document.title }) gitbook.events.bind('page.change', initMygitalk) function initMygitalk() { gitalk.render('gitalk-container') } }) const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitalk.render('gitalk-container') require(['gitbook'], function(gitbook) { const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitbook.events.bind('page.change', initMygitalk) function initMygitalk() { gitalk.render('gitalk-container') } }) "},"4. 部署网页.html":{"url":"4. 部署网页.html","title":"4. 部署网页","keywords":"","body":"部署网页 注意到运行完 gitbook serve 之后，目录下自动生成了 _book 目录，里面包含了生成网页的 html 代码。有两个办法在 GitHub 上 创建网页。 部署到新仓库 将 _book 作为新的仓库 push 到 GitHub 上，在仓库的 Settings > GitHub Pages 下选择 sourse 为 master branch 。 部署到当前仓库 修改 _book 目录名为 docs ，在仓库的 Settings > GitHub Pages 下选择 sourse 为 master branch/docs folder 。 以后编写完文档后需要 先删除 原先的 docs 目录，运行 gitbook serve 之后将生成的 _book 目录改名为 docs 为了省事我写了个脚本： update_book.sh rm -rf docs gitbook build mv _book docs cd docs rm update_book.sh rm .gitignore git add . git commit -m \"update web\" cd .. git add . git commit -m \"update doc\" git push const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitalk.render('gitalk-container') require(['gitbook'], function(gitbook) { const gitalk = new Gitalk({ clientID: '00c208c2cc4bae4c64cc', clientSecret: '3dd4511e0db4d8fa14616a395ccb3e05151032ed', repo: 'webdoc', owner: 'xy-plus', admin: ['xy-plus'], createIssueManually: true, id: document.title }) gitbook.events.bind('page.change', initMygitalk) function initMygitalk() { gitalk.render('gitalk-container') } }) "}}